// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieTicketsApp.WebApi.Shared.Database;

#nullable disable

namespace movie_tickets_app_webapi.WebApi.Shared.Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MovieTicketsApp.WebApi.Services.Genre.Entities.Genre", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset(2)");

                    b.Property<DateTimeOffset?>("Deleted")
                        .HasColumnType("datetimeoffset(2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetimeoffset(2)");

                    b.HasKey("Id");

                    b.ToTable("Genre", "MovieTicketApp");
                });

            modelBuilder.Entity("MovieTicketsApp.WebApi.Services.Movie.Entities.Movie", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset(2)");

                    b.Property<DateTimeOffset?>("Deleted")
                        .HasColumnType("datetimeoffset(2)");

                    b.Property<long>("GenreId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetimeoffset(2)");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Movie", "MovieTicketApp");
                });

            modelBuilder.Entity("MovieTicketsApp.WebApi.Services.Show.Entities.Show", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset(2)");

                    b.Property<DateTimeOffset?>("Deleted")
                        .HasColumnType("datetimeoffset(2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("MovieId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ShowDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("TheaterRoomId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetimeoffset(2)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("TheaterRoomId");

                    b.ToTable("Show", "MovieTicketApp");
                });

            modelBuilder.Entity("MovieTicketsApp.WebApi.Services.Theater.Entities.Theater", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset(2)");

                    b.Property<DateTimeOffset?>("Deleted")
                        .HasColumnType("datetimeoffset(2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetimeoffset(2)");

                    b.HasKey("Id");

                    b.ToTable("Theater", "MovieTicketApp");
                });

            modelBuilder.Entity("MovieTicketsApp.WebApi.Services.Theater.Entities.TheaterRoom", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset(2)");

                    b.Property<DateTimeOffset?>("Deleted")
                        .HasColumnType("datetimeoffset(2)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("TheaterId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("datetimeoffset(2)");

                    b.HasKey("Id");

                    b.HasIndex("TheaterId");

                    b.ToTable("TheaterRoom", "MovieTicketApp");
                });

            modelBuilder.Entity("MovieTicketsApp.WebApi.Services.Movie.Entities.Movie", b =>
                {
                    b.HasOne("MovieTicketsApp.WebApi.Services.Genre.Entities.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("MovieTicketsApp.WebApi.Services.Show.Entities.Show", b =>
                {
                    b.HasOne("MovieTicketsApp.WebApi.Services.Movie.Entities.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieTicketsApp.WebApi.Services.Theater.Entities.TheaterRoom", "TheaterRoom")
                        .WithMany()
                        .HasForeignKey("TheaterRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("TheaterRoom");
                });

            modelBuilder.Entity("MovieTicketsApp.WebApi.Services.Theater.Entities.TheaterRoom", b =>
                {
                    b.HasOne("MovieTicketsApp.WebApi.Services.Theater.Entities.Theater", "Theater")
                        .WithMany("Rooms")
                        .HasForeignKey("TheaterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Theater");
                });

            modelBuilder.Entity("MovieTicketsApp.WebApi.Services.Theater.Entities.Theater", b =>
                {
                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
